@page "/"
@using LoudPhone.Interfaces
@inject IDefaultSettings DefaultSettings
@inject IAudioManagerService AudioManagerService
@inject IOpenDontDisturbService OpenDontDisturbService
@inject ISilentModeDaemon SilentModeDaemon
@inject ISilentIntervalService SilentIntervalService

<div class="form-check form-switch">
    <input class="form-check-input" type="checkbox" role="switch" id="flexSwitchCheckDefault" @onchange="OnActiveCheckedChanged">
    @if (_activeChecked)
    {
        <label class="form-check-label" for="flexSwitchCheckDefault">Silencioso temporário Ativado</label>
    }    
</div>
<div class="card-body">    
    @if (_activeChecked && _isSilent)
    {
        <span>Saindo do silencioso em @timeLeft</span>
    }
</div>
<div class="card-body">
    @if (_isSilent)
    {
        <span>No silencioso</span>
    }
    else
    {
        <span>No alto</span>
    }
</div>

<div class="card-body">
    <button class="btn btn-light" @onclick="OpenDoNotDisturbSettings">
        Abrir permissões Não Perturbe
    </button>
</div>


@code {

    private bool _isSilent { get; set; }
    private bool _activeChecked { get; set; }
    private bool _daemonStarted;
    private Timer? _timer;
    private TimeSpan _timeLeft;
    private string timeLeft => _timeLeft.ToString(@"mm\:ss");

    private void OnActiveCheckedChanged(ChangeEventArgs e)
    {
        _activeChecked = (bool)e.Value;

        if (_activeChecked)
        {
            var defaultTime = DefaultSettings.GetDefaultSilentInterval();
            _timeLeft = TimeSpan.FromMinutes(defaultTime);
            if (!_daemonStarted)
            {
                SilentModeDaemon.StartSilentModeService();
                _daemonStarted = true;
            }
        }
        else
        {
            SilentModeDaemon.StopSilentModeService();
            _daemonStarted = false;
            _timeLeft = TimeSpan.Zero;
        }
        InvokeAsync(StateHasChanged);
    }

    private void StartTimer()
    {
        _timer = new Timer(TimerCallback, null, 1000, 1000);
    }

    private void StopTimer()
    {
        _timer?.Dispose();
        _timer = null;
    }

    private void TimerCallback(object state)
    {
        if (AudioManagerService.IsSilent())
        {
            if (!_isSilent && _activeChecked)
                OnActiveCheckedChanged(new ChangeEventArgs { Value = true });
            _isSilent = true;
        }
        else
            _isSilent = false;

        // se eu ponho no silencioso com ele ativado
        if (_isSilent && _activeChecked)
        {
            if (_timeLeft.TotalSeconds > 0)
            {
                _timeLeft = _timeLeft.Add(TimeSpan.FromSeconds(-1));
                
            }
            else if (!SilentIntervalService.IsOnSilentInterval())
            {
                _isSilent = false;
            }

        }
        InvokeAsync(StateHasChanged);
        
    }

    protected override void OnInitialized()
    {
        _timeLeft = TimeSpan.Zero;
        _isSilent = false;
        _daemonStarted = false;
        StartTimer();
        base.OnInitialized();
    }

    private void OpenDoNotDisturbSettings()
    {
        OpenDontDisturbService.OpenDoNotDisturbSettings();
    }
}
